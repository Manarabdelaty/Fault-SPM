
/*
    Automatically generated by Fault
    Do not modify.
    Generated on: 2021-01-29 09:41:02
*/
`include "libs.ref/sky130_fd_sc_hd/verilog/primitives.v"
`include "libs.ref/sky130_fd_sc_hd/verilog/sky130_fd_sc_hd.v"

`ifdef GL
    `include "gl/user_proj_top.v"
`else
    `include "dft/2-user_proj_top.tap.v"
`endif

module testbench;
    reg[0:0] \tms ;
    reg[0:0] \tdi ;
    reg[0:0] \prod_sel ;
    reg[31:0] \mc ;
    reg[31:0] \mp ;
    wire[0:0] \tdo ;
    wire[0:0] \tdo_paden_o ;
    wire[0:0] \done ;
    reg[0:0] \tck ;
    reg[0:0] \clk ;
    reg[0:0] \trst ;
    wire[31:0] \prod ;
    reg[0:0] \start ;
    reg[0:0] \rst ;
    wire[169:0] \tie ;

    
    always #2 clk = ~clk;
    always #10 tck = ~tck;

    user_proj_top uut(
    `ifdef USE_POWER_PINS
        .VPWR(1'b1),
        .VGND(1'b0),
    `endif
        .\tms ( \tms ) , .\tdi ( \tdi ) , .\prod_sel ( \prod_sel ) , .\mc ( \mc ) , .\mp ( \mp ) , .\tdo ( \tdo ) , .\tdo_paden_o ( \tdo_paden_o ) , .\done ( \done ) , .\tck ( \tck ) , .\clk ( \clk ) , .\trst ( \trst ) , .\prod ( \prod ) , .\start ( \start ) , .\rst ( \rst ) , .\tie ( \tie ) 
    );

    integer i, error;

    reg [404:0] scanInSerial;
    reg [267:0] vectors [0:19];
    reg [404:0] gmOutput[0:19];

    wire[7:0] tmsPattern = 8'b 01100110;
    wire[3:0] preloadChain = 4'b 0011;

    initial begin
        // $dumpfile("dut.vcd"); // DEBUG
        // $dumpvars(0, testbench);
        \rst = 1 ;
        \clk = 1 ;
        \mc = 0 ;
        \mp = 0 ;
        \clk = 0 ;
        \rst = 1 ;
        \start = 0 ;
        \prod_sel = 0 ;
        \tms = 1 ;
        \tck = 0 ;
        \tdi = 0 ;
        \trst = 0 ;

        $readmemb("user_proj_top.bin.vec.bin", vectors);
        $readmemb("user_proj_top.bin.out.bin", gmOutput);
        #20;
        rst = ~rst;
        trst = 1;        
        #20;
        test(vectors[0], gmOutput[0]) ;
        test(vectors[1], gmOutput[1]) ;
        test(vectors[2], gmOutput[2]) ;
        test(vectors[3], gmOutput[3]) ;
        test(vectors[4], gmOutput[4]) ;
        test(vectors[5], gmOutput[5]) ;
        test(vectors[6], gmOutput[6]) ;
        test(vectors[7], gmOutput[7]) ;
        test(vectors[8], gmOutput[8]) ;
        test(vectors[9], gmOutput[9]) ;
        test(vectors[10], gmOutput[10]) ;
        test(vectors[11], gmOutput[11]) ;
        test(vectors[12], gmOutput[12]) ;
        test(vectors[13], gmOutput[13]) ;
        test(vectors[14], gmOutput[14]) ;
        test(vectors[15], gmOutput[15]) ;
        test(vectors[16], gmOutput[16]) ;
        test(vectors[17], gmOutput[17]) ;
        test(vectors[18], gmOutput[18]) ;
        test(vectors[19], gmOutput[19]) ;

        $display("SUCCESS_STRING");
        $finish;
    end

    task test;
        input [267:0] vector;
        input [404:0] goldenOutput;
        begin
           
            // Preload Scan-Chain with TV

            shiftIR(preloadChain);
            enterShiftDR();

            for (i = 0; i < 268; i = i + 1) begin
                tdi = vector[i];
                if (i == 265) begin
                    tms = 1; // Exit-DR
                end
                if (i == 266) begin
                    tms = 0; // Pause-DR
                end
                if (i == 267) begin
                    tms = 1; // Exit2-DR
                end
                #20;
            end

            tms = 0; // Shift-DR
            #20;
            // Shift-out response
            error = 0;
            for (i = 0; i< 405;i = i + 1) begin
                tdi = 0;
                scanInSerial[i] = tdo;
                if (scanInSerial[i] !== goldenOutput[i]) begin
                    $display("Error simulating output response at bit number %0d                        Expected %0b, Got %0b", i, goldenOutput[i], scanInSerial[i]);
                    error = error + 1;
                end
                if(i == 404) begin
                    tms = 1; // Exit-DR
                end
                #20;
            end
            tms = 1; // update-DR
            #20;
            tms = 0; // run-test-idle
            #20;

            if(scanInSerial !== goldenOutput) begin
                $display("Simulating TV failed, number fo errors %0d : ", error);
                $error("SIMULATING_TV_FAILED");
                $finish;
            end
        end
    endtask

       task shiftIR;
        input[3:0] instruction;
        integer i;
        begin
            for (i = 0; i< 5; i = i + 1) begin
                tms = tmsPattern[i];
                #20;
            end

            // At shift-IR: shift new instruction on tdi line
            for (i = 0; i < 4; i = i + 1) begin
                tdi = instruction[i];
                if(i == 3) begin
                    tms = tmsPattern[5];     // exit-ir
                end
                #20;
            end

            tms = tmsPattern[6];     // update-ir 
            #20;
            tms = tmsPattern[7];     // run test-idle
            #60;
        end
    endtask

    task enterShiftDR;
        begin
            tms = 1;     // select DR
            #20;
            tms = 0;     // capture DR -- shift DR
            #40;
        end
    endtask

    task exitDR;
        begin
            tms = 1;     // Exit DR -- update DR
            #40;
            tms = 0;     // Run test-idle
            #20;
        end
    endtask
endmodule
